<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>YOLO知识储备</title>
    <url>/2023/05/29/YOLO%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/</url>
    <content><![CDATA[<h1 id="YOLO知识储备"><a href="#YOLO知识储备" class="headerlink" title="YOLO知识储备"></a>YOLO知识储备</h1><h3 id="论文-or-idea"><a href="#论文-or-idea" class="headerlink" title="论文 or idea"></a>论文 or idea</h3><ul>
<li><h4 id="YOLO全系列汇总"><a href="#YOLO全系列汇总" class="headerlink" title="YOLO全系列汇总"></a><strong>YOLO全系列汇总</strong></h4><p><a href="https://blog.csdn.net/weixin_43662553/article/details/126392748">https://blog.csdn.net/weixin_43662553/article/details/126392748</a></p>
<p><a href="https://blog.csdn.net/qq_37541097/article/details/123594351">https://blog.csdn.net/qq_37541097/article/details/123594351</a> YOLOv5s网络详解</p>
</li>
<li><h4 id="小目标检测发展总结"><a href="#小目标检测发展总结" class="headerlink" title="小目标检测发展总结"></a><strong>小目标检测发展总结</strong></h4><p><a href="https://zhuanlan.zhihu.com/p/398546919?utm_medium=social&utm_oi=785514747658375168">https://zhuanlan.zhihu.com/p/398546919?utm_medium=social&amp;utm_oi=785514747658375168</a></p>
</li>
<li><h4 id="骨干网络改进"><a href="#骨干网络改进" class="headerlink" title="骨干网络改进"></a>骨干网络改进</h4><ul>
<li><p><input checked="" disabled="" type="checkbox"> 
<strong>加入了SPD模块，用以替代步长为2的卷积操作，以更好地保留信息（GFLOPs增加的有点多，有效果）</strong></p>
<p><a href="https://blog.csdn.net/qq_38668236/article/details/127428204">https://blog.csdn.net/qq_38668236/article/details/127428204</a></p>
</li>
<li><p><input disabled="" type="checkbox"> 
Ghost-Conv代替普通卷积</p>
</li>
<li><p><input disabled="" type="checkbox"> 
自校正卷积代替普通卷积（效果不好）</p>
<p><a href="https://blog.csdn.net/weixin_42108775/article/details/107905004">https://blog.csdn.net/weixin_42108775/article/details/107905004</a></p>
</li>
</ul>
</li>
<li><h4 id="Neck改进"><a href="#Neck改进" class="headerlink" title="Neck改进"></a>Neck改进</h4><ul>
<li><p><input disabled="" type="checkbox"> 
SFPN</p>
</li>
<li><p><input disabled="" type="checkbox"> 
SSPNet</p>
</li>
<li><p><input disabled="" type="checkbox"> 
CEFPN (效果不好)</p>
</li>
<li><p><input disabled="" type="checkbox"> 
ABAM-FPN (效果不好)</p>
</li>
<li><p><input disabled="" type="checkbox"> 
TPH-YOLOv5 在Neck中加入Trans模块 和 CBAM模块 的思路可以参考（效果不好）</p>
<p><a href="https://zhuanlan.zhihu.com/p/414436190">https://zhuanlan.zhihu.com/p/414436190</a></p>
<p><a href="https://github.com/cv516Buaa/tph-yolov5/blob/main/README.md">https://github.com/cv516Buaa/tph-yolov5/blob/main/README.md</a></p>
</li>
<li><p><input disabled="" type="checkbox"> 
引入特征细化网络，重建检测颈部网络（源码复杂。。）</p>
<p><a href="https://blog.csdn.net/weixin_44782087/article/details/126458534">https://blog.csdn.net/weixin_44782087/article/details/126458534</a></p>
</li>
<li><p><input disabled="" type="checkbox"> 
使用Swin-Transformer小目标检测头（效果不好）</p>
<p><a href="https://blog.csdn.net/qq_38668236/article/details/127520592">https://blog.csdn.net/qq_38668236/article/details/127520592</a></p>
<p><a href="https://blog.csdn.net/qq_38668236/article/details/126735107">https://blog.csdn.net/qq_38668236/article/details/126735107</a></p>
</li>
<li><p><input disabled="" type="checkbox"> 
ASFF- 自适应空间特征融合（参数量和GFLOPs增加的有点多，效果不好）</p>
<p>代码：<a href="https://blog.csdn.net/m0_52587978/article/details/127639341">https://blog.csdn.net/m0_52587978/article/details/127639341</a></p>
<p>原理：<a href="https://blog.csdn.net/TJMtaotao/article/details/103216377">https://blog.csdn.net/TJMtaotao/article/details/103216377</a></p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
<strong>应用轻量级通用上采样算子CARAFE（有效果）</strong><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221130154752829.png" alt="image-20221130154752829"></p>
<p><a href="https://blog.csdn.net/weixin_43694096/article/details/126148795">https://blog.csdn.net/weixin_43694096/article/details/126148795</a> 简单介绍后直接上用法</p>
<p><a href="https://zhuanlan.zhihu.com/p/510018864">https://zhuanlan.zhihu.com/p/510018864</a> 基本是原文翻译</p>
<p><strong>基本步骤可以分为2步：</strong></p>
<p><u>1）根据每个目标位置的内容来预测一个重组核</u><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221207204800870.png" alt="image-20221207204800870"></p>
<p>​	Kernel Prediction Module负责以内容感知的方式生成重组核，该模块由3个功能单元组成：</p>
<ol>
<li><p>Channel Compressor通道压缩</p>
</li>
<li><p>Content Encoder内容编码</p>
</li>
<li><p>Kernel Normalizer正则化组成</p>
</li>
</ol>
<p><u>2）使用预测的重组核对特征进行重组</u><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221207211031538.png" alt="image-20221207211031538"></p>
<p>​</p>
</li>
</ul>
<p>	</p>
</li>
<li><h4 id="IoU改进"><a href="#IoU改进" class="headerlink" title="IoU改进"></a>IoU改进</h4><ul>
<li><p><input disabled="" type="checkbox"> 
摈弃IoU base，使用NWD度量</p>
<p><a href="https://blog.csdn.net/amusi1994/article/details/121413837">https://blog.csdn.net/amusi1994/article/details/121413837</a></p>
<p><a href="https://github.com/jwwangchn/NWD">https://github.com/jwwangchn/NWD</a></p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
<strong>使用CIoU代替IoU</strong></p>
<p><a href="https://blog.csdn.net/z240626191s/article/details/125322139">https://blog.csdn.net/z240626191s/article/details/125322139</a></p>
</li>
</ul>
</li>
<li><h4 id="yolo-head改进"><a href="#yolo-head改进" class="headerlink" title="yolo head改进"></a>yolo head改进</h4><ul>
<li><p><input disabled="" type="checkbox"> 
通过改进yoloHead来增强小目标的检测精度</p>
<p><a href="https://zhuanlan.zhihu.com/p/526165005">https://zhuanlan.zhihu.com/p/526165005</a></p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
<strong>增加一个小目标检测层（配合SPD使用效果不好，一起使用有一定的提升）</strong></p>
<p><a href="https://mp.weixin.qq.com/s/3ecefgmOZU-zugMdMWlTaA">https://mp.weixin.qq.com/s/3ecefgmOZU-zugMdMWlTaA</a></p>
</li>
</ul>
</li>
<li><h4 id="其他改进"><a href="#其他改进" class="headerlink" title="其他改进"></a>其他改进</h4><ul>
<li><p><input checked="" disabled="" type="checkbox"> 
<strong>小目标图像增强方式</strong></p>
<ul>
<li><p>形态学分割+局部对比度确认</p>
<p>从单通道的图片转换成三通道的图片，方案：</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
<u>B - 原图，G - 多尺度滤波图，R - 多尺度分割图（取最大值）（效果不好）</u></p>
<p>分析原因：背景噪声太强时，恒虚景分割会导致目标被滤掉，背景反而被留下</p>
</li>
<li><p><input disabled="" type="checkbox"> </p>
</li>
</ul>
</li>
<li><p>SAHI强化</p>
<p><a href="https://huaweicloud.csdn.net/63807f85dacf622b8df89054.html">https://huaweicloud.csdn.net/63807f85dacf622b8df89054.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/414127886">https://zhuanlan.zhihu.com/p/414127886</a></p>
</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="上下采样理论相关"><a href="#上下采样理论相关" class="headerlink" title="上下采样理论相关"></a>上下采样理论相关</h4><ul>
<li><a href="https://zhuanlan.zhihu.com/p/94477174">https://zhuanlan.zhihu.com/p/94477174</a> 上下采样无用论</li>
</ul>
</li>
</ul>
<h3 id="性能相关设置"><a href="#性能相关设置" class="headerlink" title="性能相关设置"></a>性能相关设置</h3><ul>
<li><p><input disabled="" type="checkbox"> 
显示目标由哪一层检出</p>
<p>没有找到资料，但应该在NMS之前</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
<strong>TensorBoard实时查看训练曲线</strong></p>
<p><a href="https://blog.csdn.net/LWD19981223/article/details/127558739">https://blog.csdn.net/LWD19981223/article/details/127558739</a> autoDL上打开</p>
<p>踩坑记录：</p>
<p>输入指令时，AutoDL上tensorboard对应的端口是6007，因此输入指令的时候应该是<code>--port 6007</code></p>
<p>另外，想要实时监视就需要拿到对应的event文件，yolov5s官方源码默认保存在runs&#x2F;tarins&#x2F;exp(n)中，因此<code>--logdir xxx</code></p>
<p>完整的指令：</p>
<p><code>ps -ef | grep tensorboard | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9</code></p>
<p><code>tensorboard --port 6007 --logdir /root/autodl-tmp/yolov5s-offcial-master/runs/train/exp2/</code></p>
</li>
<li><p><input disabled="" type="checkbox"> 
可视化工具汇总</p>
<p><a href="https://blog.csdn.net/manzubaolong/article/details/109241086">https://blog.csdn.net/manzubaolong/article/details/109241086</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/60753993">https://zhuanlan.zhihu.com/p/60753993</a> </p>
<p><a href="https://blog.csdn.net/qq_40231159/article/details/118270178">https://blog.csdn.net/qq_40231159/article/details/118270178</a></p>
</li>
<li><p><input disabled="" type="checkbox"> 
gard-cam热力图可视化</p>
<p><a href="https://blog.csdn.net/allrubots/article/details/127408647">https://blog.csdn.net/allrubots/article/details/127408647</a></p>
<p><a href="https://github.com/jacobgil/pytorch-grad-cam">https://github.com/jacobgil/pytorch-grad-cam</a></p>
<p><a href="https://blog.csdn.net/sinat_39307513/article/details/123204589">https://blog.csdn.net/sinat_39307513/article/details/123204589</a> 特征图可视化中，梯度计算的原理</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
<strong>中间层的特征图可视化</strong></p>
<p>（done）<a href="https://blog.csdn.net/qq_40231159/article/details/118270178">https://blog.csdn.net/qq_40231159/article/details/118270178</a> <strong>代码是将Tensor转为PIL，再通过matplotlib保存特征图</strong></p>
<p>yolov5官方源码中内置了这种特征图可视化方法，最终的生成如下：<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221203204331039.png" alt="image-20221203204331039"></p>
<p>stage25是增加的小目标检测层，可以看到，小目标在该层上的保留效果较好，对应的函数（感觉可以做一个squeeze）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">feature_visualization</span>(<span class="params">x, module_type, stage, n=<span class="number">32</span>, save_dir=Path(<span class="params"><span class="string">&#x27;runs/detect/exp&#x27;</span></span>)</span>)</span><br></pre></td></tr></table></figure>



<p><a href="https://discuss.pytorch.org/t/understanding-deep-network-visualize-weights/2060">https://discuss.pytorch.org/t/understanding-deep-network-visualize-weights/2060</a> 论坛中由许多可视化的方法</p>
<p><a href="https://zhuanlan.zhihu.com/p/559714437">https://zhuanlan.zhihu.com/p/559714437</a> 针对yolo的可视化方法</p>
<p><a href="https://github.com/open-mmlab/mmyolo">https://github.com/open-mmlab/mmyolo</a> mmyolo</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
<strong>显示mAP0.60，mAP0.75</strong></p>
<p><a href="https://blog.csdn.net/baidu_40960780/article/details/127843324">https://blog.csdn.net/baidu_40960780/article/details/127843324</a></p>
</li>
<li><p><input disabled="" type="checkbox"> 
使用C++ opencv自己画框并设置标签</p>
<p><a href="https://www.cnblogs.com/codingbigdog/p/16466816.html">https://www.cnblogs.com/codingbigdog/p/16466816.html</a></p>
</li>
</ul>
<h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><ul>
<li>连续多帧小目标图像，值得关注<ul>
<li><a href="https://www.scidb.cn/en/cstr/31253.11.sciencedb.j00001.00231">https://www.scidb.cn/en/cstr/31253.11.sciencedb.j00001.00231</a></li>
</ul>
</li>
</ul>
<h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><ul>
<li><p>网络模型查看 - netron<br><a href="https://netron.app/">https://netron.app/</a></p>
</li>
<li><p>GPU租用平台<br><a href="https://www.autodl.com/home">https://www.autodl.com/home</a></p>
</li>
<li><p>标注</p>
<p>使用 Github 上的开源软件 LabelImg 进行标注</p>
</li>
<li><p>论文解读</p>
<p><a href="https://www.aminer.cn/">https://www.aminer.cn/</a></p>
</li>
<li><p>论文+代码检索</p>
<p><a href="https://paperswithcode.com/">https://paperswithcode.com/</a></p>
</li>
<li><p><strong>针对小目标的魔改大全</strong></p>
<p><a href="https://zhuanlan.zhihu.com/p/231168560">https://zhuanlan.zhihu.com/p/231168560</a></p>
</li>
</ul>
<h3 id="代码或其他要点"><a href="#代码或其他要点" class="headerlink" title="代码或其他要点"></a>代码或其他要点</h3><ul>
<li><p>通过pth生成onnx</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> yolo <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    yoloModel = YOLO().net</span><br><span class="line">    inputs_x = torch.randn((<span class="number">1</span>, <span class="number">3</span>, <span class="number">640</span>, <span class="number">640</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line">    torch.onnx.export(yoloModel, inputs_x, <span class="string">&quot;yolov5_ABAM.onnx&quot;</span>, verbose=<span class="literal">False</span>, opset_version=<span class="number">12</span>,</span><br><span class="line">                      input_names=[<span class="string">&#x27;image&#x27;</span>], output_names=[<span class="string">&#x27;out0&#x27;</span>, <span class="string">&#x27;out1&#x27;</span>, <span class="string">&#x27;out2&#x27;</span>])</span><br></pre></td></tr></table></figure>


</li>
<li><p>断点训练&#x2F;继续训练</p>
<p>例如<code>python train.py --resume runs/train/exp/weights/last.pt</code></p>
<p>&#x3D;&#x3D;注意需要先CD到对应的工程目录下！&#x3D;&#x3D;</p>
</li>
</ul>
<h3 id="目标期刊"><a href="#目标期刊" class="headerlink" title="目标期刊"></a>目标期刊</h3><ul>
<li>计算机学报                          ISSN：0254-4164</li>
<li>北京航空航天大学学报       ISSN：1001-5965</li>
<li>红外技术                              ISSN：1001-8891</li>
<li>红外与激光工程                  ISSN：1007-2276</li>
<li>Romote Sensing                <a href="https://www.mdpi.com/journal/remotesensing">https://www.mdpi.com/journal/remotesensing</a></li>
</ul>
]]></content>
      <categories>
        <category>毕业设计相关</category>
        <category>目标检测部分</category>
        <category>加密文件</category>
      </categories>
      <tags>
        <tag>YOLO</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始部署Ubuntu系统</title>
    <url>/2023/05/29/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h4 id="更改文件权限百度云盘不限速下载"><a href="#更改文件权限百度云盘不限速下载" class="headerlink" title="更改文件权限百度云盘不限速下载"></a>更改文件权限百度云盘不限速下载</h4><p>1.所需工具</p>
<ul>
<li>IDM（Internet Download Manager） 下载网址：<a href="http://idman.ysepan.com/">http://idman.ysepan.com/</a></li>
<li>油猴插件 + 基于油猴的百度云连接提取插件</li>
</ul>
<p>2.步骤</p>
<p>（1）进入IDM主页，在选项中，在”手动添加下载任务时使用的用户代理(UA):“中输入netdisk<img src="https://markdown-img-yuusya.oss-cn-shenzhen.aliyuncs.com/picture/image-20230529215742416.png" alt="image-20230529215742416"></p>
<p>（2）下载完油猴之后，在插件列表中找一个，可以提取百度云下载链接的，本次下载的是”百度网盘千千助手“</p>
<p>（3）启动油猴，并启动对应的插件，完成后重新进入百度网盘网页界面，可以看到界面上多了一个”千千下载助手“的标志<img src="https://markdown-img-yuusya.oss-cn-shenzhen.aliyuncs.com/picture/image-20230529220104797.png" alt="image-20230529220104797"></p>
<p>（4）点击之后可以获得下载连接，在IDM中新建任务并复制连接，即可开始下载</p>
]]></content>
      <categories>
        <category>Linux操作系统</category>
        <category>实践记录</category>
      </categories>
      <tags>
        <tag>Linux操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux随手记</title>
    <url>/2023/05/23/%E9%9A%8F%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li><p><strong>.bashrc</strong></p>
</li>
<li><p><strong>使用xshell远程连接主机时, 总是中途断开</strong></p>
<p>场景说明：</p>
<p>实验室的一台主机安装了Ubuntu系统，为了方便操作，避免总是转换键盘鼠标和屏幕，使用xshell、xftp以及vscode，通过ssh对主机进行访问，结果发现，每次连接一段时间后，连接总会自动断开。</p>
<p>问题分析：</p>
<p>这是因为在主机不接键盘鼠标和屏幕后，过一段时间后（主机中设置的是5分钟）便会自动休眠挂起，以至于无法保持连接，需要禁用主机的休眠挂起</p>
<p>方法：</p>
<p><a href="http://www.taodudu.cc/news/show-4047970.html?action=onClick">http://www.taodudu.cc/news/show-4047970.html?action=onClick</a></p>
<p><a href="https://www.zoneidc.com/news/6984.html">https://www.zoneidc.com/news/6984.html</a></p>
</li>
<li><h5 id="x2F-etc-x2F-hostname与-x2F-etc-x2F-hosts的区别"><a href="#x2F-etc-x2F-hostname与-x2F-etc-x2F-hosts的区别" class="headerlink" title="&#x2F;etc&#x2F;hostname与&#x2F;etc&#x2F;hosts的区别"></a>&#x2F;etc&#x2F;hostname与&#x2F;etc&#x2F;hosts的区别</h5><p>&#x2F;etc&#x2F;hostname中存放的是主机名</p>
<p>例如：</p>
<p>ubuntu-tmp</p>
<p>&#x2F;etc&#x2F;hosts存放的是域名与ip的对应关系，域名和主机名没有任何关系，可以给任意一个IP指定任意一个名字</p>
<p>例如：</p>
<p>127.0.0.1 localhost </p>
<p>127.0.1.1 ubuntu-base</p>
</li>
<li><p><strong>Linux账号与权限管理</strong></p>
<p><a href="https://blog.csdn.net/m0_64651064/article/details/122148092">https://blog.csdn.net/m0_64651064/article/details/122148092</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux操作系统</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>Linux操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Shell指令</title>
    <url>/2023/05/21/%E5%B8%B8%E7%94%A8Shell%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="更改文件权限命令-——-chmod"><a href="#更改文件权限命令-——-chmod" class="headerlink" title="更改文件权限命令 ——  chmod"></a>更改文件权限命令 ——  <code>chmod</code></h4><p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod [ugoa...][[+-=][rwxX]...][,...] filename...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">u 表示该对象的拥有者，g 表示与该对象的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该对象是个子目录或者该对象已经被设定过为可执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c : 若该对象权限确实已经更改，才显示其更改动作</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f : 若该对象权限无法被更改也不要显示错误讯息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v : 显示权限变更的详细资料</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-R : 对目前目录下的所有对象与子目录进行相同的权限变更(即以递回的方式逐个变更)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">help</span> : 显示辅助说明</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--version : 显示版本</span></span><br></pre></td></tr></table></figure>

<p>示范：</p>
<ol>
<li><p>将对象 file1.txt 设置为所有人均可读取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod ugo+r file1.txt</span><br><span class="line">chmod a+r file1.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>将档案 file1.txt 与 file2.txt 设为该档案拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod ug+w,o-w file1.txt file2.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>将目前目录下的所有对象与子目录皆设为任何人可读取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod a+r *</span><br></pre></td></tr></table></figure></li>
</ol>
<p>此外，还可以使用数字表示权限，起对应关系如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">r=4，w=2，x=1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若要rwx属性则4+2+1=7；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若要rw-属性则4+2=6；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">若要r-x属性则4+1=5。</span></span><br></pre></td></tr></table></figure>

<p>示范：</p>
<ol>
<li><p>将对象 file1.txt 设置为所有人均有读写和执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod a=rwx file1.txt</span><br><span class="line">chmod 777 file1.txt</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="关机、重启命令"><a href="#关机、重启命令" class="headerlink" title="关机、重启命令"></a>关机、重启命令</h4><p>关机命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown -h now  # 立即关机</span><br><span class="line">shutdown -h 1    # 1分钟后关机</span><br><span class="line">shutdown         # 1分钟后关机</span><br><span class="line">shutdown -r now  # 重启</span><br></pre></td></tr></table></figure>

<p>重启命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot # 重启</span><br></pre></td></tr></table></figure>



<h4 id="创建新用户、设置密码"><a href="#创建新用户、设置密码" class="headerlink" title="创建新用户、设置密码"></a>创建新用户、设置密码</h4><p>相关命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd[option] username</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">option选项</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c: 加上备注文字，备注文字保存在passwd的备注栏中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d: 指定用户的家目录（默认用户名目录为/home/用户名，root用户名家目录是/root）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-D: 变更预设值。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-g: 指定用户所属组</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e: 指定账号的失效日期，日期格式为MM/DD/YY，例如06/30/12。缺省表示永久有效。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f: 指定在密码过期后多少天即关闭该账号。如果为0账号立即被停用；如果为-1则账号一直可用。默认值为-1.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-m: 自动建立用户的登入目录。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-M: 不要自动建立用户的登入目录。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-M: 不要自动建立用户的登入目录。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u: 指定用户<span class="built_in">id</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-r: 建立系统账号。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-s: 指定用户登入后所使用的shell。默认值为/bin/bash。</span></span><br><span class="line"></span><br><span class="line">passwd [username] # 用于设置/修改用户密码</span><br><span class="line">whoami            # 用于显示当前登录到系统的用户名</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux操作系统</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>Linux操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始部署Ubuntu系统</title>
    <url>/2023/05/21/%E4%BB%8E%E9%9B%B6%E9%83%A8%E7%BD%B2Ubuntu%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h4 id="参考的博客（后面删掉）"><a href="#参考的博客（后面删掉）" class="headerlink" title="参考的博客（后面删掉）"></a>参考的博客（后面删掉）</h4><p><a href="https://blog.csdn.net/toradexsh/article/details/106099076">https://blog.csdn.net/toradexsh/article/details/106099076</a></p>
<p><a href="https://blog.csdn.net/zjh1229/article/details/113035997">https://blog.csdn.net/zjh1229/article/details/113035997</a></p>
<p><a href="https://blog.csdn.net/qq_41256101/article/details/127039367">https://blog.csdn.net/qq_41256101/article/details/127039367</a></p>
<h4 id="NXP-固件下载地址"><a href="#NXP-固件下载地址" class="headerlink" title="NXP 固件下载地址"></a>NXP 固件下载地址</h4><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>一个完整的Ubuntu BSP包含uboot、Linux Kernel 和 Ubuntu rootfs 三部分</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="1-移植文件系统ubuntu-rootfs"><a href="#1-移植文件系统ubuntu-rootfs" class="headerlink" title="1. 移植文件系统ubuntu rootfs"></a>1. 移植文件系统ubuntu rootfs</h4><p>（1）下载Ubuntu-Base（文件系统）</p>
<p>本次移植下载的是Ubuntu-Base 18.04.5 LTS版本的文件系统，官方链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://cdimage.ubuntu.com/ubuntu-base/releases/18.04/release/</span><br></pre></td></tr></table></figure>

<p>本次下载的是其中<code>ubuntu-base-18.04.5-base-amd64.tar.gz</code>版本</p>
<p>（2）准备部署主机，创建一个文件夹解压保存</p>
<p>本次使用的主机是实验室提供的，安装的系统为Ubuntu18.04</p>
<p>创建一个文件夹<code>ubuntu-base</code>，并将tar.gz压缩包解压至该文件夹</p>
<p><img src="https://markdown-img-yuusya.oss-cn-shenzhen.aliyuncs.com/picture/image-20230525155855186.png" alt="image-20230525155855186"></p>
<p>（3）替换apt安装源（这一步骤为可选步骤）</p>
<p>默认的apt安装源为国外源，速度较慢，可以替换为国内源，指令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s|ports.ubuntu.com|mirrors.ustc.edu.cn|g&#x27; ./etc/apt/sources.list</span><br></pre></td></tr></table></figure>



<p>（4）使用脚本在主机上挂载文件系统</p>
<p>首先需要编写一个ch-mount.sh，用于挂载文件系统，网上找的代码，可用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">function mnt() &#123;</span><br><span class="line">    echo &quot;MOUNTING&quot;</span><br><span class="line">    sudo mount -t proc /proc $&#123;2&#125;proc</span><br><span class="line">    sudo mount -t sysfs /sys $&#123;2&#125;sys</span><br><span class="line">    sudo mount -o bind /dev $&#123;2&#125;dev</span><br><span class="line">    sudo mount -o bind /dev/pts $&#123;2&#125;dev/pts</span><br><span class="line"> </span><br><span class="line">    sudo chroot $&#123;2&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function umnt() &#123;</span><br><span class="line">    echo &quot;UNMOUNTING&quot;</span><br><span class="line">    sudo umount $&#123;2&#125;proc</span><br><span class="line">    sudo umount $&#123;2&#125;sys</span><br><span class="line">    sudo umount $&#123;2&#125;dev/pts</span><br><span class="line">    sudo umount $&#123;2&#125;dev</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if [ &quot;$1&quot; == &quot;-m&quot; ] &amp;&amp; [ -n &quot;$2&quot; ] ;</span><br><span class="line">then</span><br><span class="line">    mnt $1 $2</span><br><span class="line">elif [ &quot;$1&quot; == &quot;-u&quot; ] &amp;&amp; [ -n &quot;$2&quot; ];</span><br><span class="line">then</span><br><span class="line">    umnt $1 $2</span><br><span class="line">else</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo &quot;Either 1&#x27;st, 2&#x27;nd or both parameters were missing&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo &quot;1&#x27;st parameter can be one of these: -m(mount) OR -u(umount)&quot;</span><br><span class="line">    echo &quot;2&#x27;nd parameter is the full path of rootfs directory(with trailing &#x27;/&#x27;)&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo &quot;For example: ch-mount -m /media/sdcard/&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    echo 1st parameter : $&#123;1&#125;</span><br><span class="line">    echo 2nd parameter : $&#123;2&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>设置sh文件的权限为可执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod +x ch-mount.sh</span><br></pre></td></tr></table></figure>

<p>由于挂载文件系统时需要在<code>/tmp</code>中创建文件，因此需要更改路径权限，否则会出问题，更改方法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /tmp</span><br></pre></td></tr></table></figure>

<p><u>挂载&#x2F;卸载文件系统的指令如下</u></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./ch-mount.sh -m ubuntu-base/ # 挂载文件系统</span><br><span class="line">sudo ./ch-mount.sh -u ubuntu-base/ # 卸载文件系统</span><br></pre></td></tr></table></figure>



<p>（4）配置DNS服务器，hosts和hostname</p>
<p>如果不配置DNS服务器，则无法解析域名，无法使用apt或apt-get安装其他所需的包，配置的方法是将配置主机的相关文件拷贝到文件系统对应位置，命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/resolv.conf ./etc/resolv.conf</span><br></pre></td></tr></table></figure>

<p>随后通过<code>./ch-mount.sh</code>相关指令挂载文件系统，在文件系统中配置<code>/etc/hosts</code>和<code>/etc/hostname</code>文件，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;imx8m-mini&quot; &gt; /etc/hostname</span><br><span class="line">echo &quot;127.0.0.1 localhost&quot; &gt; /etc/hosts</span><br><span class="line">echo &quot;127.0.0.1 imx8mm-mini&quot; &gt;&gt; /etc/hosts  # 这个是之后要通过useradd添加的新用户</span><br></pre></td></tr></table></figure>

<p>配置完之后，才可以使用apt或apt-get下载其他所需的包</p>
<p>（5）安装常用软件包</p>
<p>命令如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install language-pack-en-base sudo ssh net-tools \</span><br><span class="line">network-manager iputils-ping rsyslog \</span><br><span class="line">bash-completion htop resolvconf dialog \</span><br><span class="line">vim nano v4l-utils alsa-utils git gcc \</span><br><span class="line">less resolvconf autoconf autopoint libtool \</span><br><span class="line">bison flex gtk-doc-tools glib-2.0 \</span><br><span class="line">libglib2.0-dev libpango1.0-dev libatk1.0-dev kmod pciutils -y</span><br></pre></td></tr></table></figure>



<p>（6）创建新用户，并设置密码</p>
<p>原始的文件系统中只有一个root用户，可以再新建一个用户，命令如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -s &#x27;bin/bash&#x27; -m -G adm,sudo imx8mm-mini # 添加用户imx8mm-mini</span><br><span class="line">sudo passwd imx8mm-mini # 设置imx8mm-mini的密码, 执行命令之后可以设置</span><br><span class="line">sudo passwd root        # 设置root的密码, 执行命令之后可以设置</span><br></pre></td></tr></table></figure>



<p>（7）退出并卸载文件系统</p>
<p>退出指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>卸载指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ./ch-mount.sh -u ubuntu-base/ # 卸载文件系统</span><br></pre></td></tr></table></figure>





<h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><ol>
<li><p>执行编写好的 ch-mount.sh 文件时，报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash^M: 解释器错误: 没有那个文件或目录</span><br></pre></td></tr></table></figure>

<p>原因：由于部署的时候，我先在Windows上写好了sh文件，再通过xftp拷贝到Linux系统下，<strong>然而dos &#x2F; windows 和 unix &#x2F; linux 换行格式编码并不相同：</strong></p>
<p>dos &#x2F; windows：【\n\r】表示换行</p>
<p>unix &#x2F; linux：      【\n】表示换行</p>
<p>解决办法：</p>
<p>使用shell指令删除【\r】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/\r$//&#x27; build.sh</span><br></pre></td></tr></table></figure>

<p>再次运行便可成功</p>
</li>
<li><p>挂载ubuntu文件系统后，执行命令<code>apt update</code>，报错如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遇见的报错1: 无法访问网站</span></span><br><span class="line">Err:1 http://cn.archive.ubuntu.com/ubuntu bionic InRelease Could not resolve &#x27;cn.archive.ubuntu.com&#x27;</span><br><span class="line">Err:2 http://security.ubuntu.com/ubuntu bionic-security InRelease Could not resolve &#x27;security.ubuntu.com&#x27;</span><br><span class="line">Err:3 http://cn.archive.ubuntu.com/ubuntu bionic-updates InRelease Could not resolve &#x27;cn.archive.ubuntu.com&#x27;</span><br><span class="line">Err:4 http://cn.archive.ubuntu.com/ubuntu bionic-backports InRelease Could not resolve &#x27;cn.archive.ubuntu.com&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">遇到的报错2: 无法创建 /tmp/xxx 文件</span></span><br><span class="line">Get:1 http://security.debian.org/debian-security buster/updates InRelease [65.4 kB]</span><br><span class="line">Err:1 http://security.debian.org/debian-security buster/updates InRelease</span><br><span class="line">  Couldn&#x27;t create temporary file /tmp/apt.conf.IRqbCz for passing config to apt-key</span><br><span class="line">Get:2 http://deb.debian.org/debian buster InRelease [122 kB]</span><br><span class="line">Err:2 http://deb.debian.org/debian buster InRelease</span><br><span class="line">  Couldn&#x27;t create temporary file /tmp/apt.conf.Afcu25 for passing config to apt-key</span><br></pre></td></tr></table></figure>

<p>针对问题1，需要正确的配置<code>/etc/hosts</code>和<code>/etc/hostname</code>，并将本地主机的<code>/etc/resolv.conf</code>拷贝到<code>./etc/resolv.conf</code>，同时保证本地主机能够正常联网，就可以解决</p>
<p>针对问题2，需要使用<code>chmod 777 /tmp/</code>设置文件夹的权限，才可以在tmp文件中创建新的文件夹及文件，可以解决该问题</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux操作系统</category>
        <category>实践记录</category>
      </categories>
      <tags>
        <tag>Linux操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>IOCTLs函数</title>
    <url>/2023/05/17/IOCTLs/</url>
    <content><![CDATA[<h2 id="ioctl函数详解"><a href="#ioctl函数详解" class="headerlink" title="ioctl函数详解"></a>ioctl函数详解</h2><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p>ioctl 是设备驱动程序中设备控制接口函数，一个字符设备驱动通常会实现设备打开、关闭、读、写等功能，在一些需要细分的情境下，如果需要扩展新的功能，通常以增设 <code>ioctl()</code> 命令的方式实现。</p>
<p>该函数从用户空间 -&gt; 内核空间的过程</p>
<p><img src="https://markdown-img-yuusya.oss-cn-shenzhen.aliyuncs.com/picture/image-20230517151041751.png" alt="image-20230517151041751"></p>
<h4 id="2-用户空间ioctl"><a href="#2-用户空间ioctl" class="headerlink" title="2.用户空间ioctl"></a>2.用户空间ioctl</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ioctl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, ...)</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">fd</td>
<td align="center">文件描述符</td>
</tr>
<tr>
<td align="center">cmd</td>
<td align="center">交互协议，设备驱动将根据cmd执行对应操作</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">可变参数arg，依赖cmd指定长度以及类型</td>
</tr>
</tbody></table>
<p>ioctl() 函数执行成功时返回 0，失败则返回 -1 并设置全局变量 errorno 值，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EBADF: fd不是一个有效的</span><br><span class="line">EFAULT: argp引用了一个不可访问的内存区域</span><br><span class="line">EINVAL: 请求或参数无效 </span><br><span class="line">ENOTTY: fd不是一个字符设备(最常见)</span><br><span class="line">ENOTTY: 指定的请求不适用于描述符fd引用的对象类型</span><br></pre></td></tr></table></figure>

<h4 id="3-驱动程序ioctl"><a href="#3-驱动程序ioctl" class="headerlink" title="3.驱动程序ioctl"></a>3.驱动程序ioctl</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> (*unlocked_ioctl) (<span class="keyword">struct</span> file *, <span class="type">unsigned</span> <span class="type">int</span>, <span class="type">unsigned</span> <span class="type">long</span>);</span><br><span class="line"><span class="type">long</span> (*compat_ioctl) (<span class="keyword">struct</span> file *, <span class="type">unsigned</span> <span class="type">int</span>, <span class="type">unsigned</span> <span class="type">long</span>);</span><br></pre></td></tr></table></figure>

<p>在新版内核中,<code>unlocked_ioctl()</code>与<code>compat_ioctl()</code>取代了<code>ioctl()</code></p>
<p>在字符设备驱动开发中，一般情况下只需要实现<code>unlocked_ioctl()</code>函数即可，因为在vfs层的代码直接调用<code>unlocked_ioctl()</code>函数</p>
<h4 id="4-ioctl-用户与驱动之间的协议"><a href="#4-ioctl-用户与驱动之间的协议" class="headerlink" title="4.ioctl 用户与驱动之间的协议"></a>4.ioctl 用户与驱动之间的协议</h4><p>前文提到 ioctl 方法第二个参数 cmd 为用户与驱动的 “协议”，理论上可以为任意 int 型数据，可以为 0、1、2、3……，但是为了确保该 “协议” 的唯一性，ioctl 命令应该使用更科学严谨的方法赋值，在linux中，提供了一种 ioctl 命令的统一格式，&#x3D;&#x3D;将 32 位 int 型数据划分为四个位段&#x3D;&#x3D;，如下图所示：</p>
<p><img src="https://markdown-img-yuusya.oss-cn-shenzhen.aliyuncs.com/picture/image-20230517173924527.png" alt="image-20230517173924527"></p>
<p>在内核中，提供了宏接口来生成上述的ioctl命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// include/uapi/asm-generic/ioctl.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IOC(dir, type, nr, size) \</span></span><br><span class="line"><span class="meta">	(((dir)  &lt;&lt; _IOC_DIRSHIFT)  | \</span></span><br><span class="line"><span class="meta">	 ((type) &lt;&lt; _IOC_TYPESHIFT) | \</span></span><br><span class="line"><span class="meta">	 ((nr)   &lt;&lt; _IOC_NRSHIFT)   | \</span></span><br><span class="line"><span class="meta">	 ((size) &lt;&lt; _IOC_SIZESHIFT))</span></span><br></pre></td></tr></table></figure>

<p><strong><code>dir (direction)</code></strong></p>
<p>ioctl命令访问模式（数据传输方向），占 2 bits，可选项包括：</p>
<p><code>_IOC_NONE</code>，<code>_IOC_READ</code>，<code>_IOC_WRITE</code>，<code>_IOC_READ | _IOC_WRITE</code></p>
<p>分别指示了四种访问模式：无数据，读数据，写数据，读写数据</p>
<p><strong><code>type(device type)</code></strong></p>
<p>设备类型，占据 8 bits，可以为任意 char 型字符，例如’a’，’b’，’c’等等，其主要作用是使 ioctl 命令唯一的设备标识</p>
<p><strong><code>nr(number)</code></strong></p>
<p>命令编号&#x2F;序数，占据 8 bit，可以为任意 unsigned char 型数据，取值范围 0~255，如果定义了多个 ioctl 命令，通常从 0 开始编号递增</p>
<p><strong><code>size</code></strong></p>
<p>涉及到 ioctl 函数 第三个参数 arg ，占据 13bit 或者 14bit（体系相关，arm 架构一般为 14 位），指定了 arg 的数据类型及长度，如果在驱动的 ioctl 实现中不检查，通常可以忽略该参数</p>
<p>通常，为了方便编程，会使用宏<code>_IOC()</code>衍生的接口来直接定义ioctl命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// include/uapi/asm-generic/ioctl.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* used to create numbers */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO(type, nr)           _IOC(_IOC_NONE, (type), (nr), 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IOR(type, nr, size)    _IOC(_IOC_READ, (type), (nr), (_IOC_TYPECHECK(size)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IOW(type, nr, size)    _IOC(_IOC_WRITE, (type), (nr), (_IOC_TYPECHECK(size)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IOWR(type, nr, size)   _IOC(_IOC_READ|_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_IO：       定义不带参数的 ioctl 命令</span><br><span class="line">_IOW：      定义带写参数的 ioctl 命令（copy_from_user）</span><br><span class="line">_IOR：      定义带读参数的 ioctl 命令（copy_to_user）</span><br><span class="line">_IOWR：     定义带读写参数的 ioctl 命令</span><br></pre></td></tr></table></figure>

<p>同时，内核还提供了反向解析 ioctl 命令的宏接口：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// include/uapi/asm-generic/ioctl.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* used to decode ioctl numbers */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IOC_DIR(nr)        (((nr) &gt;&gt; _IOC_DIRSHIFT) &amp; _IOC_DIRMASK)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IOC_TYPE(nr)       (((nr) &gt;&gt; _IOC_TYPESHIFT) &amp; _IOC_TYPEMASK)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IOC_NR(nr)         (((nr) &gt;&gt; _IOC_NRSHIFT) &amp; _IOC_NRMASK)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IOC_SIZE(nr)       (((nr) &gt;&gt; _IOC_SIZESHIFT) &amp; _IOC_SIZEMASK)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux操作系统</category>
        <category>设备驱动</category>
      </categories>
      <tags>
        <tag>Linux操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>实用工具汇总</title>
    <url>/2023/05/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
</search>
